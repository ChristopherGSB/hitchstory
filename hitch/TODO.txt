* Mapping under scenario (might require change to strictyaml?)
* Print while running.
* Don't convert mapping validated step code to string.
* Run tests with specified params via code.
* Make everything in preconditions / params schema optional.
* Params should match the schema of the precondition or step?
* Update steps make save only run if something actually changed so as not to mess up indenting.
* Rename preconditions -> given
* Rename scenario - steps
* Examples -- parameters via a name.
* Counter examples -- known failures, params with a name.
* Example generator --

given
steps
examples:

default params:
  python version: 3.5.0
  ruamel version: 
  
examples:
  default:
    python version: 3.5.0
    ruamel version: 3.11.0
  python 2:
    python version: 2.7.10
    ruamel version: 3.11.0
    
    
class Strategies(object):
    def __init__(self, cache_dir):
        self._cache = cache_dir

    def important_python_versions(self):
        return sampled_from(
            hitchbuildpy.python_versions()\
                        .important()\
                        .greater_than("2.6.3")\
                        .cache_in(self._cache)
        )
        
    def important_ruamel_yaml_versions(self):
        return sampled_from(
            hitchpypi.pypi_package_versions("ruamel.yaml")\
                    .since(months=6)\
                    .more_downloads_than(1000)\
                    .cache_in(self._cache)
        )

example strategies:
  python version: important python versions

  
.default_only()
.all_specified_examples()
.strategies()

known failure: yes

known counterexamples:

based on:
variations:

continues from:
continues as:

examples:


parameters from:

* continue from -- scenario followed on from.

* based on -- precondiions and pparameterarameters inherited

* CANNOT DO BOTH

* Inherit from story - use slugify.

* given instead of preconditions, steps instead of scenario (but allow the use of either).

* Ban the use of reserved step names: preconditions, steps, scenario, poststep, prestep, tear_down, setup

* Use non-ascii characters in all tests.

* poststep method - self.poststep(self, previous_step)

* prestep method - self.prestep(self, following_step)

* pre_testrun / post_testrun - run once when any group of stories is run - use for build? Does not work if build preconditions fail.

* global parent story?

* kwargs story, demonstrate that conversion to underscore case does not happen in kwargs whereas it does in named args.

* *args story.

* expected exceptions.

* hitchstory DEBUG mode.

5) Ctrl-C / abort / SIGTERM

6) raise clearer exception - invalid types in schema.

7) raise clearer exception - invalid about params - preconditions, name, description, params in about schema.

8) Many different kinds of inheritance?

-- take preconditions, don't take preconditions, start at the end of the story, start at the beginning of the story, ignore the story - STEP INHERITED.
-- step bundles?   
