- name: Inherit one story from another
  tags:
    - inheritance
    - documentation
    - happy
  preconditions:
    files:
      example.story: |
        Write to file 1:
          preconditions:
            a: (( a ))
            b: (( b ))
          scenario:
            - Do thing one
            - Do thing three: (( c ))
          params:
            a: 1
            b: 2
            c: 3

        Write to file 2:
          based on: Write to file 1
          preconditions:
            b: 3
          scenario:
            - Do thing two

        Write to file 3:
          based on: Write to file 1
          params:
            a: 9
            c: 11
  scenario:
    - Run command: |
        from hitchstory import StoryCollection, BaseEngine
        from strictyaml import Int, Str
        from pathquery import pathq


        class Engine(BaseEngine):
            preconditions_schema = {"a": Str(), "b": Str()}

            params_schema = {"a": Str(), "b": Str(), "c": Str()}

            def do_thing_one(self):
                output("thing one: {0}, {1}".format(self.preconditions['a'], self.preconditions['b']))

            def do_thing_three(self, value):
                output("thing three: {0}".format(value))

            def do_thing_two(self):
                output("thing two: {0}, {1}".format(self.preconditions['a'], self.preconditions['b']))

    - Run Command: StoryCollection(pathq(".").ext("story"), Engine()).named("Write to file 1").play()
    - Output is: |
        thing one: 1, 2
        thing three: 3

    - Run Command: StoryCollection(pathq(".").ext("story"), Engine()).named("Write to file 2").play()
    - Output is: |
        thing one: 1, 3
        thing three: 3
        thing two: 1, 3

    - Run Command: StoryCollection(pathq(".").ext("story"), Engine()).named("Write to file 3").play()
    - Output is: |
        thing one: 9, 2
        thing three: 11



- name: Attempt inheritance from non-existent story
  tags:
    - inheritance
    - sad
  preconditions:
    files:
      example.story: |
        Write to file:
          based on: Create files
          scenario:
            - Do thing two
  scenario:
    - Run command: |
        from hitchstory import StoryCollection, BaseEngine
        from strictyaml import Map, Str
        from pathquery import pathq


        class Engine(BaseEngine):
            def do_thing_one(self):
                output("thing one")

            def do_thing_two(self):
                output("thing two")

    - Assert Exception:
        command: StoryCollection(pathq(".").ext("story"), Engine()).named("Write to file").play()
        exception: StoryNotFound
