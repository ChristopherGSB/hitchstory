- name: Inherit one story from another
  tags:
    - inheritance
    - documentation
    - happy
  preconditions:
    files:
      example.story: |
        Write to file 1:
          preconditions:
            a: 1
            b: 2
          scenario:
            - Do thing one

        Write to file 2:
          based on: Write to file 1
          preconditions:
            b: 3
          scenario:
            - Do thing two
  scenario:
    - Run command: |
        from hitchstory import StoryCollection, BaseEngine
        from strictyaml import Int

        class Engine(BaseEngine):
            preconditions_schema = {"a": Int(), "b": Int()}

            def do_thing_one(self):
                output("thing one: {0}, {1}".format(self.preconditions['a'], self.preconditions['b']))

            def do_thing_two(self):
                output("thing two: {0}, {1}".format(self.preconditions['a'], self.preconditions['b']))

    - Run Command: StoryCollection(".", Engine()).named("Write to file 1").play()
    - Output is: |
        thing one: 1, 2

    - Run Command: StoryCollection(".", Engine()).named("Write to file 2").play()
    - Output is: |
        thing one: 1, 3
        thing two: 1, 3


- name: Attempt inheritance from non-existent story
  tags:
    - inheritance
    - sad
  preconditions:
    files:
      example.story: |
        Write to file:
          based on: Create files
          scenario:
            - Do thing two
  scenario:
    - Run command: |
        from hitchstory import StoryCollection, BaseEngine
        from strictyaml import Map, Str

        class Engine(BaseEngine):
            def do_thing_one(self):
                output("thing one")

            def do_thing_two(self):
                output("thing two")

        output(StoryCollection(".", Engine()).named("Write to file").play().report())
    - Output will be: attempt inheritance from non-existent story
