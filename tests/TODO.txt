[1]: function 'test'
  /home/colm/hitch/faketime/hitch/key.py

    
        47 : 
        48 : def test(name):
    --> 49 :     print(StoryCollection(KEYPATH/"story", Engine(KEYPATH)).shortcut(name).play().report())
        50 : 
    
    

[2]: function '__init__'
  /home/colm/.hitch/trk1s3/hvenv/lib/python3.5/site-packages/hitchstory/story_collection.py

    
        26 : 
        27 :         for filename in self._storypaths:
    --> 28 :             for story in StoryFile(filename, self._engine, self).ordered_arbitrarily():
        29 :                 if slugify(story.name) in self._stories:
    
    

[3]: function '__init__'
  /home/colm/.hitch/trk1s3/hvenv/lib/python3.5/site-packages/hitchstory/story.py

    
        180 :     def __init__(self, filename, engine, collection):
        181 :         self._filename = filename
    --> 182 :         self._yaml = filename.bytes().decode('utf8')
        183 :         self._engine = engine
    
    

builtins.AttributeError
  Attribute not found.
'str' object has no attribute 'bytes'


2) When tear_down exception occurs.

3) What to do when this is an exception that indicates a bug in your code.


PARAMETERS WHICH ARE NON-STRINGS
--------------------------------

What to do about parsing:

  number of elements: (( number of elements ))
  params:
    number of elements: 4



DOCUMENTATION
-------------

Using jinja2 template, generate a story.

Somehow attach artefacts (strings, filenames) to individual steps as they are looped through
in jinja2.





CUCUMBER COMPARISON
-------------------

http://coryschires.com/ten-tips-for-writing-better-cucumber-steps/

Why not Cucumber or other Gherkin-derived languages?
----------------------------------------------------

Cucumber was not a clearly designed language. It was more of an idea about
development that was put forward and then



Gradual typing, strong typing and does not force you to write your own mini-parser.

Strong typing
Gradual typing
Does not force you to write your own mini-parsers with regular expressions.


Why not use the Robot Framework?
--------------------------------

The robot framework is a crushing, soul cleaving embarrassment dressed up as a framework.

It was actually the first trigger that made me write the hitchdev framework. The very idea that you
could write an executable language that failed on a particular line and *wouldn't tell you which line
it failed* on implied such an epic failure of imagination that I figured that I couldn't possibly make
anything worse. A burning hatred of the Robot Framework is what drove the creation of hitch.


Why not write tests using python using a unit testing framework instead of this weird YAML language?
----------------------------------------------------------------------------------------------------

It seems simpler to just keep everything in the same language, but it's actually not.

A common objection to special 'test' languages is that they

Unit tests.


Why did you not use standard YAML for hitch?
--------------------------------------------

hitchtest (the precursor to hitchstory) actually did use standard YAML. StrictYAML was written
in response to its 
