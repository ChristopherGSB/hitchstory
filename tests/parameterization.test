- name: Run through story with parameters
  tags:
    - preconditions
    - parameters
    - simple
    - documentation
    - happy
  preconditions:
    files:
      example.story: |
        Create files:
          preconditions:
            content: (( myparameter ))
            hierarchical content:
              x: 1
              y:
                - (( parameter2 ))
          scenario:
            - Do thing with precondition
            - Do other thing: (( myparameter ))
            - Do yet another thing
            - Do a fourth thing:
                animals:
                  pond animal: (( parameter3 ))
          params:
            myparameter: dog
            parameter2: cat
            parameter3: frog
  scenario:
    - Run command: |
        from hitchstory import StoryCollection, BaseEngine, StorySchema, validate
        from strictyaml import Map, Seq, Int, Str
        from pathquery import pathq


        class Engine(BaseEngine):
            schema = StorySchema(
                preconditions={
                    "content": Str(),
                    "hierarchical content": Map({
                        "x": Int(),
                        "y": Seq(Str()),
                    }),
                },
                params={
                    "myparameter": Str(),
                    "parameter2": Str(),
                    "parameter3": Str(),
                },
            )

            def do_other_thing(self, parameter):
                output(parameter)

            def do_thing_with_precondition(self):
                output(self.preconditions['content'])

            def do_yet_another_thing(self):
                output(self.preconditions['hierarchical content']['y'][0])

            @validate(animals=Map({"pond animal": Str()}))
            def do_a_fourth_thing(self, animals=None):
                output(animals['pond animal'])

        StoryCollection(pathq(".").ext("story"), Engine()).one().play()
    - Output is: |
        dog
        dog
        cat
        frog
