- name: Hierarchical data in steps
  description: |
    You can put complex, hierarchical data in steps provided
    the step has a validator for the data.
  tags:
    - story
    - hierarchical
    - happy
    - sad
  preconditions:
    files:
      example.story: |
        Create files:
          scenario:
            - Add product:
                name: Towel
                versions:
                  - 2.6
                  - 2.3.4
                quantity: 2
                options:
                  tagline: Hoopy
                  nametag: Ford Prefect
  scenario:
    - Run command: |
        from hitchstory import StoryCollection, BaseEngine, validate
        from strictyaml import Seq, Str, Int, Map
        from pathquery import pathq


        class Engine(BaseEngine):
            def set_up(self):
                pass

            @validate(versions=Seq(Str()), options=Map({"tagline": Str(), "nametag": Str()}))
            def add_product(self, name=None, versions=None, quantity=None, options=None):
                output(options['nametag'])

            def tear_down(self):
                pass

        result = StoryCollection(pathq(".").ext("story"), Engine()).one().play()
    - Output is: Ford Prefect
